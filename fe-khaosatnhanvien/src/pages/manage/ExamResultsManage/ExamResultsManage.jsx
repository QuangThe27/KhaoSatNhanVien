import { useEffect, useState } from 'react';
import { Table, Tag, Typography, message, Spin, Button, Modal, Popconfirm } from 'antd';
import { getAllExamResults, deleteExamResult } from '../../../services/examResultService';
import {
    getExamQuestionResultsByExamResultId,
    updateExamQuestionScore,
} from '../../../services/examQuestionResultService';

const { Title } = Typography;

function ExamResults() {
    const [results, setResults] = useState([]);
    const [loading, setLoading] = useState(false);
    const [detailVisible, setDetailVisible] = useState(false);
    const [questionResults, setQuestionResults] = useState([]);
    const [detailLoading, setDetailLoading] = useState(false);
    const [editingScores, setEditingScores] = useState({});

    // Load t·∫•t c·∫£ k·∫øt qu·∫£
    const fetchResults = async () => {
        try {
            setLoading(true);
            const data = await getAllExamResults();
            setResults(data);
        } catch (error) {
            console.error(error);
            message.error('Kh√¥ng th·ªÉ t·∫£i danh s√°ch k·∫øt qu·∫£!');
        } finally {
            setLoading(false);
        }
    };

    useEffect(() => {
        fetchResults();
    }, []);

    // Xem chi ti·∫øt b√†i ki·ªÉm tra
    const handleViewDetail = async (examResultId) => {
        try {
            setDetailLoading(true);
            setDetailVisible(true);
            const data = await getExamQuestionResultsByExamResultId(examResultId);
            setQuestionResults(data);
        } catch (error) {
            console.error(error);
            message.error('Kh√¥ng th·ªÉ t·∫£i chi ti·∫øt b√†i ki·ªÉm tra!');
        } finally {
            setDetailLoading(false);
        }
    };

    // X√≥a k·∫øt qu·∫£
    const handleDelete = async (id) => {
        try {
            await deleteExamResult(id);
            message.success('ƒê√£ x√≥a k·∫øt qu·∫£!');
            fetchResults();
        } catch (error) {
            console.error(error);
            message.error('Kh√¥ng th·ªÉ x√≥a k·∫øt qu·∫£!');
        }
    };

    // C·ªôt b·∫£ng k·∫øt qu·∫£ ch√≠nh
    const columns = [
        {
            title: 'M√£',
            dataIndex: 'id',
            key: 'id',
            width: 70,
        },
        {
            title: 'T√™n b√†i ki·ªÉm tra',
            dataIndex: 'examName',
            key: 'examName',
            render: (text) => <strong>{text}</strong>,
        },
        {
            title: 'Ng∆∞·ªùi l√†m',
            dataIndex: 'userName',
            key: 'userName',
        },
        {
            title: 'ƒêi·ªÉm',
            dataIndex: 'totalScore',
            key: 'totalScore',
            render: (score) => <Tag color={score >= 5 ? 'green' : 'red'}>{score}</Tag>,
        },
        {
            title: 'Ng√†y t·∫°o',
            dataIndex: 'createdAt',
            key: 'createdAt',
            render: (date) => new Date(date).toLocaleString(),
        },
        {
            title: 'Ng√†y c·∫≠p nh·∫≠t',
            dataIndex: 'updatedAt',
            key: 'updatedAt',
            render: (date) => new Date(date).toLocaleString(),
        },
        {
            title: 'H√†nh ƒë·ªông',
            key: 'actions',
            render: (_, record) => (
                <>
                    <Button type="link" onClick={() => handleViewDetail(record.id)} style={{ marginRight: 8 }}>
                        Chi ti·∫øt
                    </Button>
                    <Popconfirm
                        title="X√≥a k·∫øt qu·∫£ n√†y?"
                        okText="X√≥a"
                        cancelText="H·ªßy"
                        onConfirm={() => handleDelete(record.id)}
                    >
                        <Button type="link" danger>
                            X√≥a
                        </Button>
                    </Popconfirm>
                </>
            ),
        },
    ];

    // C·ªôt b·∫£ng chi ti·∫øt c√¢u h·ªèi
    const detailColumns = [
        {
            title: 'C√¢u h·ªèi',
            dataIndex: 'questionContent',
            key: 'questionContent',
        },
        {
            title: 'Lo·∫°i',
            dataIndex: 'questionType',
            key: 'questionType',
        },
        {
            title: 'ƒê√°p √°n',
            key: 'answer',
            render: (_, record) =>
                record.questionType === 'Essay' ? record.essayAnswers || '(Ch∆∞a c√≥ b√†i l√†m)' : record.answerContent,
        },
        {
            title: 'ƒêi·ªÉm',
            key: 'score',
            render: (text, record) =>
                record.questionType === 'Essay' ? (
                    <div style={{ display: 'flex', gap: 8 }}>
                        <input
                            type="number"
                            step="0.5"
                            min={0}
                            max={record.maxScore} // üëâ gi·ªõi h·∫°n ƒëi·ªÉm t·ªëi ƒëa
                            value={editingScores[record.id] ?? record.score}
                            onChange={(e) => {
                                let val = parseFloat(e.target.value);
                                if (val > record.maxScore) val = record.maxScore; // ch·∫∑n v∆∞·ª£t qu√°
                                if (val < 0) val = 0; // ch·∫∑n √¢m
                                setEditingScores({
                                    ...editingScores,
                                    [record.id]: val,
                                });
                            }}
                            style={{ width: 80 }}
                        />
                        <Button type="primary" size="small" onClick={() => handleUpdateScore(record.id)}>
                            C·∫≠p nh·∫≠t
                        </Button>
                    </div>
                ) : (
                    <Tag color={record.score > 0 ? 'green' : 'red'}>{record.score}</Tag>
                ),
        },
    ];

    // C·∫≠p nh·∫≠t ƒëi·ªÉm
    const handleUpdateScore = async (id) => {
        try {
            const score = editingScores[id];
            if (score === undefined || score === null) {
                message.warning('Vui l√≤ng nh·∫≠p ƒëi·ªÉm.');
                return;
            }

            await updateExamQuestionScore(id, score);
            message.success('ƒê√£ c·∫≠p nh·∫≠t ƒëi·ªÉm!');

            // Refresh l·∫°i chi ti·∫øt
            const updatedData = await getExamQuestionResultsByExamResultId(questionResults[0]?.examResultId);
            setQuestionResults(updatedData);

            // ƒê·ªìng th·ªùi refresh b·∫£ng ch√≠nh ƒë·ªÉ c·∫≠p nh·∫≠t totalScore
            fetchResults();
        } catch (error) {
            console.error(error);
            message.error('Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t ƒëi·ªÉm!');
        }
    };

    return (
        <div style={{ padding: 20 }}>
            <Title level={3}>üìä Qu·∫£n l√Ω k·∫øt qu·∫£ b√†i ki·ªÉm tra</Title>

            {loading ? (
                <div style={{ textAlign: 'center', padding: '50px 0' }}>
                    <Spin size="large" />
                </div>
            ) : (
                <Table bordered rowKey="id" dataSource={results} columns={columns} pagination={{ pageSize: 10 }} />
            )}

            {/* Modal chi ti·∫øt */}
            <Modal
                open={detailVisible}
                title="Chi ti·∫øt b√†i ki·ªÉm tra"
                footer={null}
                onCancel={() => setDetailVisible(false)}
                width={800}
            >
                {detailLoading ? (
                    <Spin size="large" />
                ) : (
                    <Table
                        bordered
                        rowKey="id"
                        dataSource={questionResults}
                        columns={detailColumns}
                        pagination={false}
                    />
                )}
            </Modal>
        </div>
    );
}

export default ExamResults;
